import os
import subprocess
import time

def run_script(script_name):
    """Executa um script Python e controla o progresso"""
    print(f"\n{'='*50}")
    print(f"Executando {script_name}...")
    print(f"{'='*50}")
    
    try:
        # Executa o script
        result = subprocess.run(['python', script_name], cwd=os.path.dirname(os.path.abspath(__file__)))
        
        if result.returncode == 0:
            print(f"\n‚úÖ {script_name} executado com sucesso!")
        else:
            print(f"\n‚ùå Erro ao executar {script_name}. C√≥digo de retorno: {result.returncode}")
    except Exception as e:
        print(f"\n‚ùå Exce√ß√£o ao executar {script_name}: {str(e)}")

def main():
    """Executa todos os scripts de an√°lise de dados"""
    start_time = time.time()
    
    print("\n" + "*"*70)
    print("*" + " "*27 + "AN√ÅLISE COVID-19" + " "*27 + "*")
    print("*" + " "*13 + "AN√ÅLISE COMPLETA DE DADOS DA COVID-19 NO BRASIL" + " "*13 + "*")
    print("*" + " "*70 + "*")
    print("*" + " "*18 + "Este processo executar√° duas an√°lises:" + " "*18 + "*")
    print("*" + " "*20 + "1. An√°lise geral da COVID-19" + " "*21 + "*")
    print("*" + " "*20 + "2. Compara√ß√£o de vacina√ß√£o por ano" + " "*16 + "*")
    print("*"*70)
    print("\nIniciando an√°lise completa...\n")
    
    # Executa o script principal de an√°lise
    run_script('main.py')
    
    # Executa o script de compara√ß√£o de vacina√ß√£o
    run_script('comparacao_vacinacao_anual.py')
    
    # Exibe resumo das visualiza√ß√µes geradas
    print("\n" + "="*70)
    print("RESUMO DE VISUALIZA√á√ïES GERADAS".center(70))
    print("="*70)
    
    if os.path.exists('visualizacoes'):
        files = os.listdir('visualizacoes')
        
        # Agrupa por categorias
        covid_graphs = [f for f in files if any(x in f for x in ['casos', 'obitos', 'letalidade', 'correlacao', 'regiao', 'vacinacao_vs_mortalidade'])]
        predicao_graphs = [f for f in files if any(x in f for x in ['regressao', 'confusao'])]
        cluster_graphs = [f for f in files if any(x in f for x in ['kmeans', 'dbscan'])]
        vacinacao_graphs = [f for f in files if any(x in f for x in ['doses', 'evolucao', 'composicao', 'media', 'radar', 'percentual', 'variacao'])]
        
        print("\nüìä GR√ÅFICOS DE AN√ÅLISE COVID-19:")
        for i, graph in enumerate(covid_graphs, 1):
            print(f"   {i}. {graph}")
        
        print("\nüìà GR√ÅFICOS DE MODELAGEM PREDITIVA:")
        for i, graph in enumerate(predicao_graphs, 1):
            print(f"   {i}. {graph}")
        
        print("\nüîç GR√ÅFICOS DE CLUSTERIZA√á√ÉO:")
        for i, graph in enumerate(cluster_graphs, 1):
            print(f"   {i}. {graph}")
            
        print("\nüíâ GR√ÅFICOS DE COMPARA√á√ÉO DE VACINA√á√ÉO:")
        for i, graph in enumerate(vacinacao_graphs, 1):
            print(f"   {i}. {graph}")
            
        print(f"\nTotal de visualiza√ß√µes: {len(files)}")
    else:
        print("‚ùå Diret√≥rio de visualiza√ß√µes n√£o encontrado!")
    
    # Exibe o tempo total de execu√ß√£o
    end_time = time.time()
    exec_time = end_time - start_time
    
    print("\n" + "*"*70)
    print(f"AN√ÅLISE COMPLETA FINALIZADA EM {exec_time:.2f} SEGUNDOS".center(70))
    print("*"*70)
    print(f"\nTodas as visualiza√ß√µes est√£o dispon√≠veis no diret√≥rio 'visualizacoes/'")
    print("Para visualizar os gr√°ficos interativos HTML, abra-os em um navegador web.")

if __name__ == "__main__":
    main() 